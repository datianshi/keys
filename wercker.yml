box: golang
services:
build:
  # The steps that will be executed on build
  steps:

    - script:
        name: env
        code: env
    # Sets the go workspace and places you package
    # at the right place in the workspace tree
    - setup-go-workspace

    # Get the dependencies
    - script:
        name: go get
        code: |
          export GO15VENDOREXPERIMENT=1
          cd $WERCKER_SOURCE_DIR
          go version
          wget https://github.com/Masterminds/glide/releases/download/v0.12.3/glide-v0.12.3-linux-amd64.tar.gz
          tar xvzf glide-v0.12.3-linux-amd64.tar.gz
          export PATH=./linux-amd64:$PATH
          export PATH=$WERCKER_SOURCE_DIR/bin:$PATH
          glide install

    # Test the project
    - script:
        name: go test
        code: |
          LOG_LEVEL=debug go test $(glide novendor) -v -cover -race

crosscompile:
  steps:
    - setup-go-workspace

    # Get the dependencies
    - script:
        name: go get
        code: |
          export GO15VENDOREXPERIMENT=1
          cd $WERCKER_SOURCE_DIR
          go version
          wget https://github.com/Masterminds/glide/releases/download/v0.11.1/glide-v0.11.1-linux-amd64.tar.gz
          tar xvzf glide-v0.11.1-linux-amd64.tar.gz
          export PATH=./linux-amd64:$PATH
          export PATH=$WERCKER_SOURCE_DIR/bin:$PATH
          glide install
    - script:
        name: set release id variable and version
        code: |
          go get github.com/xchapter7x/versioning
          export NEXT_VERSION=`versioning bump_patch`-`git rev-parse HEAD | cut -c1-6`
          echo "next version should be: ${NEXT_VERSION}"

    - script:
        name: cross platform release
        code: |
          (GOOS=linux GOARCH=amd64 go build -o keys-linux -ldflags "-X main.VERSION=${NEXT_VERSION}" main.go)
          (GOOS=darwin GOARCH=amd64 go build -o keys-osx -ldflags "-X main.VERSION=${NEXT_VERSION}" main.go)
          (GOOS=windows GOARCH=amd64 go build -o keys.exe -ldflags "-X main.VERSION=${NEXT_VERSION}" main.go)

    - script:
        name: add repo to artifact
        code: |
          cp -R ./ ${WERCKER_OUTPUT_DIR}

    - script:
        name: list output dir
        code: |
          ls -al ${WERCKER_OUTPUT_DIR}
deploy:
  steps:
    - script:
        name: install-packages
        code: |
          sudo apt-get install -y openssh-client wget
          ls -la
          pwd
          echo ${WERCKER_OUTPUT_DIR}
          ls -la ${WERCKER_OUTPUT_DIR}

    - wercker/add-ssh-key@1.0.2:
        keyname: GITHUB_KEY

    - wercker/add-to-known_hosts@1.4.0:
        hostname: github.com
        fingerprint: 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48

    - script:
        name: set release id variable for version
        code: |
          go get github.com/xchapter7x/versioning
          export WERCKER_GITHUB_CREATE_RELEASE_ID=`versioning bump_patch`-`git rev-parse HEAD | cut -c1-6`

    - github-create-release:
        token: $GITHUB_TOKEN
        tag: $WERCKER_GITHUB_CREATE_RELEASE_ID
        title: $WERCKER_GITHUB_CREATE_RELEASE_ID
        draft: true

    - github-upload-asset:
        token: $GITHUB_TOKEN
        file: keys-linux
        release_id: $WERCKER_GITHUB_CREATE_RELEASE_ID
        content-type: application/x-gzip
    - github-upload-asset:
        token: $GITHUB_TOKEN
        file: keys-osx
        release_id: $WERCKER_GITHUB_CREATE_RELEASE_ID
        content-type: application/x-gzip
    - github-upload-asset:
        token: $GITHUB_TOKEN
        file: keys.exe
        release_id: $WERCKER_GITHUB_CREATE_RELEASE_ID
        content-type: application/x-gzip
